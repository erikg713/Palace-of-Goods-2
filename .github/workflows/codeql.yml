name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 0 * * *'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python', 'typescript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more: https://docs.github.com/en/code-security/code-scanning/using-codeql-code-scanning/using-the-codeql-cli/about-the-codeql-cli

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "CodeQL Analysis Failed",
            body: `The CodeQL analysis failed for the following commit: ${context.sha}. Please investigate the issue.`
          })
                      - name: Run python black code formatter
  # You may pin to the exact commit or the version.
  # uses: DataDog/action-py-black-formatter@bebd29d1572a82c8e4a9de3c42c1592529a7d6af
  uses: DataDog/action-py-black-formatter@v2.5
  with:
    # Black additional input arguments.
    additional_args: # optional, default is 
    # Exit code when black formatting errors are found [true, false]. Defaults to 'true'.

    fail_on_error: # optional, default is true
    # Main branch of the repository to speed up incremental diff

    main_branch: # optional, default is main
    # (--quiet) Don't emit non-error messages to stderr. Errors are still emitted; silence 
  those with 2>/dev/null

    quiet_mode: # optional, default is false
    # (--diff) Don't write the files back, just output a diff for each file on stdout.

    print_diff_mode: # optional, default is false
    # (--check) Don't write the files back, just return the status. Return code 0 means nothing 
  would change. Return code 1 means some files would be reformatted. Return code 123 means
  there was an internal error.

    check_mode: # optional, default is false
    # Turn on if you only want to check changed files instead of all files.

    only_changed_files: # optional, default is false
    # Sha of the commit to compare files to.

    base_commit: # optional, default is 
          
